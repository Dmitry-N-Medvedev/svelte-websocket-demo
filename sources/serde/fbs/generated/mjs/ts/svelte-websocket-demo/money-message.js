// automatically generated by the FlatBuffers compiler, do not modify
import * as flatbuffers from 'flatbuffers';
export class MoneyMessage {
    bb = null;
    bb_pos = 0;
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsMoneyMessage(bb, obj) {
        return (obj || new MoneyMessage()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsMoneyMessage(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new MoneyMessage()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    wallet() {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    mutate_wallet(value) {
        const offset = this.bb.__offset(this.bb_pos, 4);
        if (offset === 0) {
            return false;
        }
        this.bb.writeFloat64(this.bb_pos + offset, value);
        return true;
    }
    delta() {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    mutate_delta(value) {
        const offset = this.bb.__offset(this.bb_pos, 6);
        if (offset === 0) {
            return false;
        }
        this.bb.writeFloat64(this.bb_pos + offset, value);
        return true;
    }
    static startMoneyMessage(builder) {
        builder.startObject(2);
    }
    static addWallet(builder, wallet) {
        builder.addFieldFloat64(0, wallet, 0.0);
    }
    static addDelta(builder, delta) {
        builder.addFieldFloat64(1, delta, 0.0);
    }
    static endMoneyMessage(builder) {
        const offset = builder.endObject();
        return offset;
    }
    static createMoneyMessage(builder, wallet, delta) {
        MoneyMessage.startMoneyMessage(builder);
        MoneyMessage.addWallet(builder, wallet);
        MoneyMessage.addDelta(builder, delta);
        return MoneyMessage.endMoneyMessage(builder);
    }
}
